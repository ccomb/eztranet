This package allows to compute thumbnails for objects, and to store them
in the annotations as blob.

======================
Thumbnail of an object
======================
First some imports::

    >>> from eztranet.thumbnail.interfaces import IThumbnailed, IThumbnail, IThumbnailer
    >>> from eztranet.thumbnail.thumbnail import Thumbnail, ImageThumbnailer, VideoThumbnailer
    >>> from zope.interface import alsoProvides, Interface, implements
    >>> from zope.component import adapts, adapter
    >>> import eztranet.thumbnail
    >>> from os.path import dirname, join
    >>> from zope.file.interfaces import IFile
    >>> from zope.file.file import File
    >>> import os


Any object can store a thumbnail in its annotations.
We create a generic interface, class and an instance::

    >>> class IMyObject(Interface):
    ...     pass
    >>> class MyObject(object):
    ...   implements(IMyObject)
    >>> myobj = MyObject()
    
We first register the thumbnail adapter (normally done via zcml)::

    >>> ztapi.provideAdapter(IThumbnailed, IThumbnail, Thumbnail)

We just tell that the object can have a thumbnail (also done via zcml)::

    >>> alsoProvides(myobj, IThumbnailed)
    >>> IThumbnailed.providedBy(myobj)
    True

Now we can lookup the Thumbnail adapter for our object::

    >>> thumb = IThumbnail(myobj)
    >>> thumb
    <eztranet.thumbnail.thumbnail.Thumbnail object at ...>

Now, the thumbnail object can give either the image itself or the url,
depending on the implementation, but they are still empty for now.
The image can be computed, and the url can be used to provide a resource::

    >>> thumb.image is None
    True
    >>> thumb.url is None
    True

The thumbnail adapter has a method to compute the thumbnail image::

    >>> thumb.compute_thumbnail()

It does nothing by default because we don't know how to compute the thumbnail.
We have to provide a "thumbnailer" for our object.
A thumbnailer is just a callable adapter that returns the content of an image,
given the object from which to compute the thumbnail::

We create a dummy thumbnailer, and we register it as an adapter::

    >>> class DummyThumbnailer(object):
    ...     adapts(IMyObject)
    ...     def __init__(self, context):
    ...         self.context = context
    ...     def __call__(self):
    ...         return 'dummy content'
    >>> ztapi.provideAdapter(IMyObject, IThumbnailer, DummyThumbnailer)

Now we are able to ask for a thumbnailer for our object::

    >>> myobject_dummythumbnailer = IThumbnailer(myobj)
    >>> myobject_dummythumbnailer()
    'dummy content'

So now if we compute the thumbnail image, we get it in the thumbnail object::

    >>> thumb.compute_thumbnail()
    >>> thumb.image
    <zope.file.file.File object at ...>
    >>> thumb.image.open().read()
    'dummy content'

=================
Image thumbnailer
=================
An image thumbnailer is provided by the package.
It is registered as a named adapter to the blob-based zope.file.interfaces.IFile
And the name is the major contentType 'image'.

First we create a source blob-based image file,
and we tell it can hold a thumbnail ::

    >>> samplepath = join(dirname(eztranet.thumbnail.__file__), 'sample.png')
    >>> blobfile = File()
    >>> fd = blobfile.open('w')
    >>> fd.write(open(samplepath).read())
    >>> fd.close()
    >>> blobfile.size
    3172
    >>> alsoProvides(blobfile, IThumbnailed)

We initialize the content type, but this should be done during upload::

    >>> blobfile.mimeType = 'image/png'

Then we register the image thumbnailer (done via zcml)::

    >>> ztapi.provideAdapter(IFile, IThumbnailer, ImageThumbnailer, 'image')

Now we can directly call the thumbnail adapter and compute the thumbnail::

    >>> thumb = IThumbnail(blobfile)
    >>> thumb.image is None
    True
    >>> thumb.compute_thumbnail()
    >>> thumb.image
    <zope.file.file.File object at ...>
    >>> thumb.image.size
    1443
    >>> thumb.url is None
    True

Try to compute again the thumbnail::

    >>> thumb.compute_thumbnail()
    >>> thumb.image.size
    1443
   

If the thumbnail can not be computed, we get a default url::

    >>> fd = blobfile.open('w')
    >>> fd.write('bad content')
    >>> fd.close()
    >>> blobfile.size
    11
    >>> thumb.compute_thumbnail()
    >>> thumb.image is None
    True
    >>> thumb.url
    '/@@/default_thumbnail.png'

=================
Video thumbnailer
=================
A video thumbnailer is provided by the package.
It is registered as a named adapter to the blob-based zope.file.interfaces.IFile
And the name is the major contentType 'video'.

We keep the same file as before but we fill it with a ogg video::

    >>> samplepath = join(dirname(eztranet.thumbnail.__file__), 'sample.ogg')
    >>> fd = blobfile.open('w')
    >>> fd.write(open(samplepath).read())
    >>> fd.close()
    >>> blobfile.size
    180511

We initialize the content type, but this should be done during upload::

    >>> blobfile.mimeType = 'video/ogg'

Then we register the video thumbnailer (done via zcml)::

    >>> ztapi.provideAdapter(IFile, IThumbnailer, VideoThumbnailer, 'video')

Now we can directly call the thumbnail adapter and compute the thumbnail::

    >>> thumb = IThumbnail(blobfile)
    >>> thumb.image is None
    True
    >>> thumb.compute_thumbnail()
    >>> thumb.image
    <zope.file.file.File object at ...>
    >>> thumb.image.size
    15256
    >>> thumb.url is None
    True


If the thumbnail can not be computed, we get a default url::

    >>> fd = blobfile.open('w')
    >>> fd.write('bad content')
    >>> fd.close()
    >>> blobfile.size
    11
    >>> thumb.compute_thumbnail()
    >>> thumb.image is None
    True
    >>> thumb.url
    '/@@/default_thumbnail.png'

=================
Default thumbnail
=================

If we don't have a correct mimeType, we get a generic thumbnail::

    >>> blobfile.mimeType = 'unknown type'
    >>> thumb = IThumbnail(blobfile)
    >>> thumb.image is None
    True
    >>> thumb.compute_thumbnail()
    >>> thumb.image is None
    True
    >>> thumb.url
    '/@@/default_thumbnail.png'

==============
thumbnail view
==============

We recreate the blobfile and its thumbnail::

    >>> samplepath = join(dirname(eztranet.thumbnail.__file__), 'sample.png')
    >>> fd = blobfile.open('w')
    >>> fd.write(open(samplepath).read())
    >>> fd.close()
    >>> blobfile.mimeType = 'image/png'
    >>> blobfile.size
    3172
    >>> thumb.compute_thumbnail()
    >>> thumb.image.size
    1443
    >>> thumb.url is None
    True

We put the blob in the database

    >>> from ZODB.MappingStorage import MappingStorage
    >>> from ZODB.blob import BlobStorage
    >>> from ZODB.DB import DB
    >>> import transaction
    >>> import tempfile
    >>> from tempfile import mkdtemp
    >>> base_storage = MappingStorage("test")
    >>> blob_dir = mkdtemp()
    >>> blob_storage = BlobStorage(blob_dir, base_storage)
    >>> database = DB(blob_storage)
    >>> connection = database.open()
    >>> root = connection.root()
    >>> root['blobfile'] = blobfile
    >>> transaction.commit()
    
Then we call the thumbnail view, that returns a DownloadResult
with the content of the thumbnail::

    >>> from zope.publisher.browser import TestRequest
    >>> from eztranet.thumbnail.browser import ThumbnailImageView
    >>> d = ThumbnailImageView(blobfile, TestRequest())()
    >>> len(iter(d).next())
    1443


We clean the temporary database::

    >>> import shutil
    >>> shutil.rmtree(blob_dir)
    >>> database.close()





