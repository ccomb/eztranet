Import / Export
===============

This package offers ability to upload or download a project at one as a zip
file. It should not eat the memory, and should warn about diskspace. Logic bombs
should also be avoided (ie 1kB zip that inflates to 1TB)

First some useful imports:

    >>> from zope.interface import implements, Interface, alsoProvides
    >>> from zope.component import getAdapter, getGlobalSiteManager, adapts
    >>> from zope.schema import TextLine
    >>> import os, tempfile


1er adaptateur IImport sur le folder
ensuite on détermine le type de fichier
pour une image :
    lookup d'une factory 'image'
    on cree l'image
    on importe les autres fonctionnalités

pour un zip :
    lookup d'une factory 'zip' qui est en fait un utility d'import


target : IFolder, IImage, IVideo

type de fichier : 'zip' 'image' 'video'


1er adaptateur sur la target,
puis

===========
Basic ideas
===========

We have interfaces that offer the export or import functionalities:

    >>> from eztranet.importexport.interfaces import IImport, IExport

Then we have marker interfaces to put on any object which is exportable or importable:

    >>> from eztranet.importexport.interfaces import IImportable, IExportable

Then we create a dummy object+interface to import and export:

    >>> class IDummy(Interface):
    ...     foo = TextLine(title=u"Foobar", description=u"Description")
    ...     def bar():
    ...         "a method"
    >>> class Dummy(object):
    ...     implements(IDummy)
    ...     foo = None
    ...     def bar(self):
    ...         pass

    >>> dummy = Dummy()
    >>> dummy.foo = u"text c\xc3\xb4ntent with accent"

Our object must be importable and exportable:

    >>> alsoProvides(dummy, IExportable)

We need to register our plugins

    >>> from eztranet.importexport.ini import IniExport, IniImport
    >>> getGlobalSiteManager().registerAdapter(IniExport, name='ini')
    >>> getGlobalSiteManager().registerAdapter(IniImport, name='ini')

Now our object should be able to provide IExport and IImport through
named adapters. The name of the adapter is the export/import format.

Thus we can export our object to a specific path:

    >>> fd, filename = tempfile.mkstemp()
    >>> dummy_export = getAdapter(dummy, IExport, name='ini')
    >>> dummy_export.do_export(filename=filename)
    >>> os.close(fd)
    >>> open(filename).read()
    '[IExportable]\n\n[IDummy]\nfoo = text c\xc3\x83\xc2\xb4ntent with accent\n\n'

We can also import it to another object:

    >>> dummy2 = Dummy()
    >>> alsoProvides(dummy2, IImportable)
    >>> dummy2.foo is None
    True
    >>> dummy2_import = getAdapter(dummy2, IImport, name='ini')
    >>> dummy2_import.do_import(filename=filename)
    >>> dummy2.foo
    u'text c\xc3\xb4ntent with accent'

Remove the temp file:

    >>> os.remove(filename)


========================
Export/import is generic
========================

Exporting an object depends on its interfaces : we can export separately all
the functionnalities of an object : IImage (which will export the image itself),
ICommentable (which will export the comments) , IThumbnailed (which will export
the thumbnails), IConfigurable (which will export the configuration), etc...

The export and import implementations should be located in the package
corresponding to the feature: ex the IExport plugin for IThumbnailed, should
be in the thumbnail package.

Maybe there should be a list of requirements for a feature,
such as "beeing exportable", "being importable", "being configurable"?

We then need something to aggregate all the exports.

The role of the importexport package is just to do the lookups for the export or
import plugins, display some export page, and aggregate the results from the
different plugins.

This package offers a set of generic export and import plugins, but third-party
packages can offer more specific export or import plugins.

Here we only test export and import for a dummy exportable and importable class.

Our dummy class is exportable, and have a dummy feature by providing
ISomeFeatureable, so that an adapter exists and provide ISomeFeature

    >>> class ISomeFeatureable(Interface):
    ...     pass
    >>> class ISomeFeature(Interface):
    ...     pass

Our object must have the feature:

    >>> alsoProvides(dummy, ISomeFeatureable)

An adapter exists and offers the feature:

    >>> class SomeFeature(object):
    ...     adapts(ISomeFeatureable)
    ...     implements(ISomeFeature)
    ...
    ...     def __init__(self, context):
    ...         self.context = context
    ...
    ...     feature = 'foobar'
    >>>
    >>> getGlobalSiteManager().registerAdapter(SomeFeature)

So we can use the feature with the object:

    >>> ISomeFeature(dummy).feature
    'foobar'

Now we want to export the feature for the object. We must have an export plugin
for the feature:

    >>> class SomeFeatureExport(object):
    ...     adapts(ISomeFeatureable)
    ...     implements(IExport)
    ...
    ...     def __init__(self, context):
    ...         self.context = context
    ...
    ...     def do_export(self, filename):
    ...         exported_feature = ISomeFeature(self.context).feature
    ...         exported_file = open(filename, 'w')
    ...         exported_file.write(exported_feature)
    ...         exported_file.close()
    ...
    >>> getGlobalSiteManager().registerAdapter(SomeFeatureExport)

Now we can export our feature

    >>> fd, filename = tempfile.mkstemp()
    >>> os.close(fd)
    >>> IExport(dummy).do_export(filename)

We check the feature has been exported:

    >>> f = open(filename)
    >>> f.read()
    'foobar'
    >>> f.close()
    >>> os.remove(filename)



=====================
Zip import and export
=====================

zope.app.container and zope.file already have their export/import adapters.
We will try to import a zipped hierarchy of files and folders,
then reexport it.

We first create a hierarchy of folders:

    >>> folderpath = tempfile.mkdtemp()
    >>> foldername = os.path.basename(folderpath)
    >>> from os.path import join
    >>> os.mkdir(join(folderpath, 'folder1'))
    >>> os.mkdir(join(folderpath, 'folder1', 'folder11'))
    >>> os.mkdir(unicode(join(folderpath, u'folder2\xe9')))
    >>> os.mkdir(unicode(join(folderpath, u'folder2\xe9', 'folder22')))

We create 4 files in this hierarchy:

    >>> f = open(join(folderpath, 'file1'), 'w')
    >>> f.write('filecontent1')
    >>> f.close()
    >>> f = open(join(folderpath, 'folder1', 'file11'), 'w')
    >>> f.write('filecontent11')
    >>> f.close()
    >>> f = open(join(folderpath, 'folder1', 'folder11', 'file111'), 'w')
    >>> f.write('filecontent111')
    >>> f.close()
    >>> f = open(join(folderpath, u'folder2\xe9', 'folder22', 'file222'), 'w')
    >>> f.write('filecontent222')
    >>> f.close()

We zip and remove the hierarchy:

    >>> import zipfile
    >>> fd, zfilename = tempfile.mkstemp(suffix='.zip')
    >>> os.close(fd)
    >>> zfile = zipfile.ZipFile(zfilename, 'w')
    >>> zfile.write(join(folderpath, 'file1'),
    ...             join('file1'))
    >>> zfile.write(join(folderpath, 'folder1', 'file11'),
    ...             join('folder1', 'file11'))
    >>> zfile.write(join(folderpath, 'folder1', 'folder11', 'file111'),
    ...             join('folder1', 'folder11', 'file111'))
    >>> zfile.write(join(folderpath, u'folder2\xe9', 'folder22', 'file222'),
    ...             join(u'folder2\xe9', 'folder22', 'file222').encode('iso8859-1'))
    >>> zfile.close()

    >>> import shutil
    >>> shutil.rmtree(folderpath)

We register our export and import plugins:

    >>> from eztranet.importexport.zip import ZipExport, ZipImport
    >>> getGlobalSiteManager().registerAdapter(ZipExport, name='zip')
    >>> getGlobalSiteManager().registerAdapter(ZipImport, name='zip')

    >>> from eztranet.project.project import ProjectItemExport, ProjectItemImport
    >>> getGlobalSiteManager().registerAdapter(ProjectItemExport)
    >>> getGlobalSiteManager().registerAdapter(ProjectItemImport)

We also need to tell which kind of object to create in the ZODB.

    >>> from zope.component import IFactory
    >>> from zope.app.container.sample import SampleContainer
    >>> getGlobalSiteManager().registerUtility(SampleContainer, IFactory, 'folder')
    >>> from eztranet.project.project import ProjectItem
    >>> getGlobalSiteManager().registerUtility(ProjectItem, IFactory, 'file')



We create an importable container and import the zipfile into the container:

    >>> from ZODB.MappingStorage import MappingStorage
    >>> from ZODB.blob import BlobStorage
    >>> from ZODB.DB import DB
    >>> import transaction

    >>> base_storage = MappingStorage("test")
    >>> blob_dir = tempfile.mkdtemp()
    >>> blob_storage = BlobStorage(blob_dir, base_storage)
    >>> database = DB(blob_storage)
    >>> connection = database.open()
    >>> folder = connection.root()
    >>> alsoProvides(folder, IImportable)
    >>> zipimport = getAdapter(folder, IImport, 'zip')
    >>> zipimport.do_import(filename=zfilename)
    >>> transaction.commit()

Now we check we have all the subobjects:

    >>> 'file1' in folder
    True
    >>> 'file11' in folder['folder1']
    True
    >>> 'file111' in folder['folder1']['folder11']
    True
    >>> 'file222' in folder[u'folder2\xe9']['folder22']
    True

And that files have the correct content:

    >>> 'filecontent1' == folder['file1'].openDetached().read()
    True
    >>> 'filecontent11' == folder['folder1']['file11'].openDetached().read()
    True
    >>> 'filecontent111' == folder['folder1']['folder11']['file111'].openDetached().read()
    True
    >>> 'filecontent222' == folder[u'folder2\xe9']['folder22']['file222'].openDetached().read()
    True

Now we reexport this content:

    >>> alsoProvides(folder, IExportable)
    >>> fd, exported_path = tempfile.mkstemp()
    >>> os.close(fd)
    >>> zipexport = getAdapter(folder, IExport, 'zip')
    >>> zipexport.do_export(exported_path)

We check both files have the same content:

    >>> len(open(exported_path).read()) == len(open(zfilename).read())
    True

Now we can remove our temp files:

    >>> os.remove(exported_path)
    >>> os.remove(zfilename)
    >>> shutil.rmtree(blob_dir)

